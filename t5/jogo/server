#!/usr/bin/env python3
# Antes de usar, execute o seguinte comando para evitar que o Linux feche
# as conexões TCP que o seu programa estiver tratando:
#
# sudo iptables -I OUTPUT -p tcp --tcp-flags RST RST -j DROP


# Este é um exemplo de um programa que faz eco, ou seja, envia de volta para
# o cliente tudo que for recebido em uma conexão.

import asyncio
import traceback
import random
from camadarede import CamadaRedeLinux
from mytcp import Servidor as Tcp
from vars import width, height, rows
import json

DEBUG = True


def move_left(current_position, next_position):
    next_x, _ = next_position
    current_x, current_y = current_position['position']

    return (next_x, current_y) if current_x - 1 == next_x and next_x >= 0 \
        else (current_x, current_y)


def move_right(current_position, next_position):
    next_x, _ = next_position
    current_x, current_y = current_position

    return (next_x, current_y) if current_x + 1 == next_x and next_x < width \
        else (current_x, current_y)


def move_up(current_position, next_position):
    _, next_y = next_position
    current_x, current_y = current_position

    return (current_x, next_y) if current_y + 1 == next_y and next_y < height \
        else (current_x, current_y)


def move_down(current_position, next_position):
    _, next_y = next_position
    current_x, current_y = current_position

    return (current_x, next_y) if current_y - 1 == next_y and next_y >= 0 \
        else (current_x, current_y)


class Server:
    def __init__(self):
        self.players = []
        self.fruits = []

        if DEBUG:
            print('Iniciando servidor!')

    def dados_recebidos(self, conexao, dados):
        if DEBUG:
            print(conexao, 'recebido', dados)
        if dados == b'':
            if DEBUG:
                src_addr, src_port, _, _ = conexao.id_conexao
                print('Fechando conexão com', f'{src_addr}:{src_port}')

            del self.players[conexao]
            conexao.fechar()

        else:
            dados_decodificados = dados.decode()
            dados_decodificados = json.loads(dados_decodificados)
            print(dados_decodificados)

            self.parser(conexao, dados_decodificados)

            self.broadcast()

    def conexao_aceita(self, conexao):
        self.players.append({'id': conexao, 'position': (0, 0), 'score': 0})
        conexao.registrar_recebedor(self.dados_recebidos)

    def private_message(self, msg, conexao):
        msg_encoded = msg.encode()
        conexao.enviar(msg_encoded)

    def broadcast(self):

        for player in self.players:
            conexao = player['id']
            other_players = list(
                filter(lambda item: item['id'] != conexao,
                       self.players.copy()))

            other_players = list(
                map(lambda item: {'position': item['position'],
                                  'score': item['score']}, other_players))
            me = self.get_player(player['id'])
            print('me', me)
            state = {
                'players': other_players,
                'fruits': self.fruits,
                'me': me['position']
            }

            print('before', state)

            msg = json.dumps(state).encode()
            conexao.enviar(msg)

    def get_player(self, conexao):
        print('conexao', conexao)
        print('players', self.players)
        return list(filter(lambda item:
                           item['id'] == conexao, self.players))[0]

    def move(self, player, dados):
        current_position = player['position']
        next_position = dados['position']

        print('Veio:', dados['action'])

        actions = {
            'move_left': move_left,
            'move_right': move_right,
            'move_up': move_up,
            'move_down': move_down,
        }

        try:
            position = actions[dados['action']](
                current_position, next_position)
            player['position'] = position
        except Exception:
            traceback.print_exc()

    def check_fruits(self, player):
        position = player['position']
        if position in self.fruits:
            player['score'] += 1
            self.fruits.remove(position)

            x = random.randrange(rows)
            y = random.randrange(rows)
            self.fruits.append((x, y))

    def parser(self, conexao, dados):
        player = self.get_player(conexao)

        self.move(player, dados)
        self.check_fruits(player)


server = Server()
rede = CamadaRedeLinux()
tcp = Tcp(rede, 7000)
tcp.registrar_monitor_de_conexoes_aceitas(server.conexao_aceita)
asyncio.get_event_loop().run_forever()
