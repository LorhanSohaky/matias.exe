#!/usr/bin/python3

import select
import socket
import threading


HOST = 'localhost'
PORT = 7000
MAX_LISTEN = 5
END_OF_MESSAGE = b'\n'
MAX_BUFFER_SIZE = 6144


class Server:
    def __init__(self):
        print('Iniciando servidor!')
        self.clients = []
        self.clients_ready_to_response = []
        self.inputs = {}
        self.outputs = {}
        self.usernames = {}
        self.socket_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Do not use SO_REUSEADDR in production enviroment
        self.socket_server.setsockopt(
            socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket_server.bind((HOST, PORT))
        self.socket_server.listen(MAX_LISTEN)

    def accept_connection(self):
        connection = self.socket_server.accept()[0]
        self.clients.append(connection)
        self.inputs[connection] = b''

    def send_message(self, client):
        connection = client
        message = self.outputs[client]
        connection.send(message)
        self.clients_ready_to_response.remove(client)
        self.inputs[client] = b''
        self.outputs[client] = b''

    def read_message(self, client):
        connection = client
        input_data = b''
        try:
            input_data = connection.recv(2048)
        except ConnectionResetError:
            pass
        previous_data = self.inputs[connection]
        data = previous_data + input_data

        # Check size to prevent overflow
        if len(data) >= MAX_BUFFER_SIZE:
            data = input_data

        self.inputs[connection] = data

        if data.find(END_OF_MESSAGE) != -1:
            self.protocol(client)
            if not client in self.clients_ready_to_response:
                self.clients_ready_to_response.append(connection)
        elif len(input_data) == 0:
            self.clients.remove(client)
            connection.close()
            del self.inputs[client]
            del self.outputs[client]
            if client in self.clients_ready_to_response:
                self.clients_ready_to_response.remove(client)
            if client in self.usernames:
                message = b'/quit ' + self.usernames[client]+b'\n'
                del self.usernames[client]
                self.broadcast(message)

    def multiplex_client(self):
        sockets = self.clients.copy()
        sockets.append(self.socket_server)
        while sockets:
            ready_to_read, ready_to_write, exception = select.select(
                sockets, self.clients_ready_to_response, [])

            for socket in ready_to_read:
                if socket is self.socket_server:
                    self.accept_connection()
                else:
                    self.read_message(socket)

            for socket in ready_to_write:
                self.send_message(socket)
            sockets = self.clients.copy()
            sockets.append(self.socket_server)

    def has_clients(self):
        return len(self.clients)

    def protocol(self, client):
        if self.inputs[client].startswith(b'/nick'):
            nick = b''.join(self.inputs[client].split(b'/nick '))
            nick = nick.replace(b'\n', b'')
            if b':' in self.inputs[client] or b' ' in nick:
                self.outputs[client] = b'/error\n'
            elif nick in self.usernames.values():
                self.outputs[client] = b'/error\n'
            else:
                if client in self.usernames:
                    message = b'/renamed ' + \
                        self.usernames[client] + b' ' + nick + b'\n'
                else:
                    message = b'/joined ' + nick + b'\n'
                self.usernames[client] = nick
                self.broadcast(message)
        else:
            message = b''
            if client in self.usernames:
                message = self.usernames[client], self.inputs[client]
                message = b': '.join(message)
                self.broadcast(message)
            else:
                self.outputs[client] = b'/error\n'

    def broadcast(self, message):
        for client in self.clients:
            self.outputs[client] = message
            self.clients_ready_to_response.append(client)


def main():
    server = Server()
    server.multiplex_client()


if __name__ == '__main__':
    main()
